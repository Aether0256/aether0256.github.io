<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>STARFRONT</title>
    <url>/2023/10/22/STARFRONT/</url>
    <content><![CDATA[<p>论文标题：<a href="https://ieeexplore.ieee.org/abstract/document/10103663">STARFRONT: Cooperatively Constructing Pervasive and Low-Latency CDNs Upon Emerging LEO Satellites and Cloud</a><br>会议&#x2F;期刊：TON 2023<br>第一作者： 赖泽祺</p>
<h2 id="背景介绍"><a href="#背景介绍" class="headerlink" title="背景介绍"></a>背景介绍</h2><p>由于地面网络基础设施建设的不足以及网络自治域之间不当的路由选择，世界上仍有许多地区无法享受到低延迟的互联网内容服务，尤其是在不发达地区或者空中、海上等难以部署地面接入网络的区域。Starlink等计划能够在近地轨道部署大量卫星，降低了卫星使用成本。因此，融合地面网络和卫星网络，建设覆盖范围更广的低时延内容分发网络成为可能。</p>
<h2 id="工作目标"><a href="#工作目标" class="headerlink" title="工作目标"></a>工作目标</h2><p>本项目旨在通过结合地面网络和卫星网络，提供覆盖全球的低时延、低成本CDN。</p>
<h2 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h2><p>系统模型如图所示：</p>
<p>主要包括STARFRONT控制器、缓存服务器和用户三部分。<br>缓存服务器包括云和卫星两部分，云指的是CDN厂商在各地建设的服务器集群；卫星包括运行在低地球轨道上数以千计的节点，每个节点都有一定的计算和存储能力，它们既可以做内容的缓存服务器，也可以做用户请求内容的网络中继节点。<br>用户可能分布在全球各地，获取数据的方式如图所示。</p>
<p>大致分为以下几种：</p>
<ol>
<li>直接从地面网络获取云服务器数据；</li>
<li>通过一颗或多颗卫星作为中继获取云服务器数据；</li>
<li>直接从卫星缓存获取数据；</li>
<li>通过卫星作为中继获取卫星缓存上的数据；</li>
</ol>
<p>STARFRONT控制器主要发挥决策的作用，主要包括决定将数据拷贝到哪一台服务器或哪一个卫星上，以及该将用户的请求重定向至哪一个节点。但是在决策过程中，应当考虑卫星网络的动态变化和降低开销两个方面。首先，低地球轨道卫星是高速运动的，往往两小时之内就可以绕地球一周，和地面网络进行联合建模时，拓扑也会动态变化；其次，卫星网络的带宽和存储资源相对地面更加珍贵，因此构建CDN需要考虑添加卫星网络后的费用开销。</p>
<p>用户访问CDN的方式不同，带来的流量和存储花费就不同，网络时延也不相同，本文将上述问题归纳为一个开销最小化的内容分发问题(cost effective content distribution problem,CECD)，提出了数学模型和高效的启发式算法。</p>
<h2 id="问题建模"><a href="#问题建模" class="headerlink" title="问题建模"></a>问题建模</h2><p>网络拓扑图</p>
<p>节点集：</p>
<table>
<thead>
<tr>
<th align="center">符号</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">$Src$</td>
<td align="center">数据源服务器</td>
</tr>
<tr>
<td align="center">$C&#x3D;{C_1,C_2,…,C_m}$</td>
<td align="center">作为缓存的云服务器</td>
</tr>
<tr>
<td align="center">$S&#x3D;{S_1,S_2,…,S_1}$</td>
<td align="center">卫星</td>
</tr>
<tr>
<td align="center">$T&#x3D;{t_1,t_2,…,t_{</td>
<td align="center">T</td>
</tr>
<tr>
<td align="center">$S^t&#x3D;{S_{1t},S_{2t},…,S_{</td>
<td align="center">T</td>
</tr>
<tr>
<td align="center">$S&#x3D;S^{t_1} \cup S^{t_2}… \cup S^{t_{</td>
<td align="center">T</td>
</tr>
<tr>
<td align="center">$CS^t&#x3D;{CS_{1t},CS_{2t},…,CS_{mt}}$</td>
<td align="center">在一个时间片内可以通过卫星访问到的云服务器</td>
</tr>
<tr>
<td align="center">$C^t&#x3D;C \cup CS^t$</td>
<td align="center">在一个时间片之内的所有云服务器</td>
</tr>
<tr>
<td align="center">$C&#x3D;C^{t_1} \cup C^{t_1} … \cup C^{t_{</td>
<td align="center">T</td>
</tr>
<tr>
<td align="center">$J$</td>
<td align="center">地表所有用户区域</td>
</tr>
<tr>
<td align="center">$R&#x3D;{r_1,r_2,…,r_J}$</td>
<td align="center">全球所有区域请求</td>
</tr>
<tr>
<td align="center">$req_{rt}$</td>
<td align="center">时间片$t$内来自区域$r$的所有请求</td>
</tr>
<tr>
<td align="center">$RQ^t&#x3D;{RQ^t_{r1},RQ^t_{r2},…,RQ^t_{rJ}}$</td>
<td align="center">时间片$t$内来自所有区域的请求</td>
</tr>
<tr>
<td align="center">$RQ&#x3D;RQ^{t_1} \cup RQ^{t_2} … \cup RQ^{t_{</td>
<td align="center">T</td>
</tr>
<tr>
<td align="center">$V_t&#x3D;{Src} \cup S^t \cup C^t \cup RQ^t$</td>
<td align="center">时间片$t$内图中所有节点</td>
</tr>
<tr>
<td align="center">$V_T&#x3D;V_{t_1} \cup V_{t_2} … \cup V_{t_{</td>
<td align="center">T</td>
</tr>
</tbody></table>
<p>边集合$E_T$包含节点之间所有有效边，边两端的节点不同，边的含义也不相同，设$cost_{traffic}(i,j)$为两节点间传输数据的带宽开销，如果其中一个节点来自用户，那么有$latency(i,j)$表示用户从此节点获取数据的时延。</p>
<table>
<thead>
<tr>
<th align="center">$i$</th>
<th align="center">$j$</th>
<th align="center">$cost(i,j)$</th>
</tr>
</thead>
<tbody><tr>
<td align="center">$C$</td>
<td align="center">$C$</td>
<td align="center">$c$</td>
</tr>
<tr>
<td align="center">$C$</td>
<td align="center">$S$</td>
<td align="center">$\alpha \cdot c$</td>
</tr>
<tr>
<td align="center">$S$</td>
<td align="center">$S$</td>
<td align="center">$\beta \cdot c$</td>
</tr>
<tr>
<td align="center">$req$</td>
<td align="center">$C$</td>
<td align="center">$c$</td>
</tr>
<tr>
<td align="center">$req$</td>
<td align="center">$CS$</td>
<td align="center">$\alpha \cdot c$</td>
</tr>
<tr>
<td align="center">$req$</td>
<td align="center">$S$</td>
<td align="center">$\alpha \cdot c$</td>
</tr>
</tbody></table>
<p>最后，有图$G_T&#x3D;(V_T,E_T)$</p>
<p>对于某一类请求，设存在原图的子图$DG&#x3D;(V_{DG},E_{DG}) \in G_T$，其中非用户节点的每一个节点都包含数据的拷贝，设$x(i)$标识某个节点在原图中是否被宣州，设$\lambda(i,j)$为原图中某条边是否被选中，$CT(DG)$为使用该子图进行内容分发的开销，则问题可表述为，寻找一组$x(i)$与$\lambda(i,j)$，使得子图$DG$的开销$CT(DG)$最小。</p>
<p>离线算法 $OffPA$</p>
<blockquote>
<p>Algorithm1 Offline Placement and Assignment (OffPA)</p>
<p>Input: </p>
<p>Output:</p>
<p>$RQ_{remain} \leftarrow RQ$ </p>
<p>while </p>
<blockquote>
<p>for each do</p>
<blockquote>
<p>if</p>
<blockquote>
<p>a </p>
</blockquote>
<p>endif</p>
</blockquote>
<p>end for</p>
</blockquote>
<p>end while</p>
</blockquote>
<p>在线算法 $OnPA$</p>
<p>使用预拷贝的在线算法 $PAOA$</p>
<h2 id="系统评估"><a href="#系统评估" class="headerlink" title="系统评估"></a>系统评估</h2><p>环境搭建</p>
<p>使用自建网络仿真平台，能够模拟云网络和卫星网络</p>
<p>STARFRONT原型实现</p>
]]></content>
      <categories>
        <category>文献阅读</category>
      </categories>
      <tags>
        <tag>LEO</tag>
        <tag>天地一体化网络</tag>
      </tags>
  </entry>
  <entry>
    <title>My Blog</title>
    <url>/2023/10/22/My-Blog/</url>
    <content><![CDATA[]]></content>
  </entry>
</search>
